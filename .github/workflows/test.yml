name: Cross-Platform Tests

on:
  push:
    branches: [master, main, develop]
  pull_request:
    branches: [master, main, develop]
  workflow_dispatch: # Allow manual trigger

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test on ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: windows
          - os: macos-latest
            platform: macos

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Verify Bun installation
        run: bun --version

      - name: Install dependencies
        run: bun install

      - name: Run TypeScript type checking
        run: bun run typecheck

      - name: Run unit tests
        run: bun test tests/unit/ --timeout 30000
        env:
          NODE_ENV: test
          CI: true

      - name: Run integration tests
        run: bun test tests/integration/ --timeout 60000
        env:
          NODE_ENV: test
          CI: true

      - name: Run cross-platform tests
        run: bun test tests/platform/ --timeout 30000
        env:
          NODE_ENV: test
          CI: true

      - name: Run format conversion tests
        run: bun test tests/conversion/ --timeout 30000
        env:
          NODE_ENV: test
          CI: true

      - name: Test CLI installation
        run: |
          bun run install
          codeflow --version
        shell: bash

      - name: Test project setup (dry run)
        run: codeflow setup . --type opencode --dry-run
        shell: bash

      - name: Test agent format conversion (dry run)
        run: codeflow convert-all --dry-run
        shell: bash

      - name: Test MCP server configuration (dry run)
        run: codeflow mcp list
        shell: bash

  test-coverage:
    name: Test Coverage Report
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Run tests with coverage
        run: bun test --coverage --coverage-reporter=lcov
        env:
          NODE_ENV: test
          CI: true

      # Note: Coverage reporting can be extended with services like Codecov if needed
      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v3
      #   with:
      #     file: ./coverage/lcov.info

  test-real-agents:
    name: Validate Real Agents
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Install dependencies
        run: bun install

      - name: Validate base agents
        run: |
          echo "Testing base agents parsing..."
          find agent/ -name "*.md" -not -name "README*" | head -5 | while read file; do
            echo "Validating $file"
            bun test -t "validates all existing agents" --timeout 10000
          done

      - name: Validate OpenCode agents
        run: |
          echo "Testing OpenCode agents parsing..."
          find opencode-agents/ -name "*.md" -not -name "README*" | head -5 | while read file; do
            echo "Validating $file"
          done

      - name: Test format conversions
        run: |
          echo "Testing format conversion accuracy..."
          bun run typecheck
          mkdir -p /tmp/test-conversion
          codeflow convert ./agent /tmp/test-conversion claude-code --dry-run

  test-mcp-integration:
    name: MCP Server Integration
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Install dependencies
        run: bun install

      - name: Test MCP server startup
        run: |
          # Test that MCP server can start and respond
          timeout 30s bun run mcp/codeflow-server.mjs &
          SERVER_PID=$!
          sleep 5

          # Test that server is responsive (basic check)
          if ps -p $SERVER_PID > /dev/null; then
            echo "✅ MCP server started successfully"
            kill $SERVER_PID
          else
            echo "❌ MCP server failed to start"
            exit 1
          fi

      - name: Test MCP tool registration
        run: |
          echo "Testing MCP tool registration..."
          # This runs the integration tests specifically for MCP
          bun test tests/integration/mcp-server.test.ts --timeout 45000

  test-file-operations:
    name: File System Operations
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Install dependencies
        run: bun install

      - name: Test file system operations
        run: |
          # Test file creation, reading, and deletion
          mkdir -p test-workspace
          echo "test content" > test-workspace/test.txt

          # Test CLI can handle workspace
          codeflow status test-workspace || echo "Expected: no .opencode directory"

          # Clean up
          rm -rf test-workspace

      - name: Test Unicode file handling
        run: |
          # Test with Unicode file names and content
          mkdir -p unicode-test
          echo "Unicode content: 你好世界 🌍" > "unicode-test/测试文件.txt"
          ls -la unicode-test/
          rm -rf unicode-test

      - name: Test path resolution
        run: bun test tests/platform/cross-platform.test.ts -t "Platform-Specific Path Resolution" --timeout 15000

  report-results:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [test, test-coverage, test-real-agents, test-mcp-integration, test-file-operations]
    if: always()

    steps:
      - name: Test Results
        run: |
          echo "## Cross-Platform Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.test.result }}" = "success" ]; then
            echo "✅ Core tests passed on all platforms" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Core tests failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.test-coverage.result }}" = "success" ]; then
            echo "✅ Coverage tests completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Coverage tests had issues" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.test-real-agents.result }}" = "success" ]; then
            echo "✅ Real agent validation passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Real agent validation failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.test-mcp-integration.result }}" = "success" ]; then
            echo "✅ MCP server integration tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ MCP server integration tests failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.test-file-operations.result }}" = "success" ]; then
            echo "✅ File system operations tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ File system operations tests failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Total test suites:** 5" >> $GITHUB_STEP_SUMMARY
          echo "**Platform coverage:** Linux, Windows, macOS" >> $GITHUB_STEP_SUMMARY
          echo "**Test categories:** Unit, Integration, Cross-platform, Format conversion, Real agents" >> $GITHUB_STEP_SUMMARY
